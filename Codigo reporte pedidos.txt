 //[ResponseType(typeof(PedidoDetalleResponseDTO))]
        [Route("api/Pedidos/PedidoReporte")]
        [HttpGet]
        public List<PedidoResponseDTO> PedidoReporte(String fechaInicio_Str = "1800-01-01", String fechaFin_Str = "3000-09-15", String estado = "ALL")
        {//= "ALL"
            /*Variables*/
            DateTime desde = DateTime.ParseExact(fechaInicio_Str, "yyyy-mm-dd", null);
            DateTime hasta = DateTime.ParseExact(fechaInicio_Str, "yyyy-mm-dd", null);
            List<PedidoResponseDTO> pedidos_retornados = new List<PedidoResponseDTO>();


            /*Filtrar por fecha inicio y fin.*/
            List<PedidoResponseDTO> pedidosMapper = GetPedidos_EntreFechas(desde, hasta);


            pedidosMapper = pedidosMapper.OrderBy(F => F.FechePedido).ToList();


            /*
             menor que cero: si la primera fecha es menor que la segunda
            cero: si las dos fechas son iguales
            mayor que cero: si la primera fecha es mayor que la segunda */
            //pedidosMapper = pedidosMapper.Where(p => p.Estado == estado);


            //Filtramos por estado.
            if (estado == "ALL") return pedidosMapper;

            switch (estado)
            {
                case "PENDIENTE":
                    foreach (var pedidoRequest in pedidosMapper)
                    {
                        if (pedidoRequest.Estado == "PENDIENTE")
                        {
                            pedidos_retornados.Add(pedidoRequest);
                            //pedidosMapper.Remove(pedidoRequest);
                        }

                    }

                    break;
                case "FACTURANDO":
                    foreach (var pedidoRequest in pedidosMapper)
                    {
                        if (pedidoRequest.Estado == "FACTURANDO")
                        {
                            pedidos_retornados.Add(pedidoRequest);
                            //pedidosMapper.Remove(pedidoRequest);
                        }

                    }
                    break;
                case "FACTURADO":
                    foreach (var pedidoRequest in pedidosMapper)
                    {
                        if (pedidoRequest.Estado == "FACTURADO")
                        {
                            pedidos_retornados.Add(pedidoRequest);
                            //pedidosMapper.Remove(pedidoRequest);

                        }

                    }
                    break;
            }

            return pedidos_retornados;
        }



        //PENDIENTE
        //FACTURANDO
        //FACTURADO

        //Me trae todos los pedidos incluyendo una fecha.
        private List<PedidoResponseDTO> GetPedidos_EntreFechas(DateTime desde, DateTime hasta)
        {

            var Pedidos = db.Pedidos
                .Where(p => !p.Deleted && p.FechaPedido >= desde && p.FechaPedido <= hasta)
                .Include(p => p.Cliente)
                .Include(p => p.Vendedor)
                .OrderBy(p => p.Estado.Equals("PENDIENTE"))
                .OrderBy(p => p.FechaPedido)
                .ToList();

            return PedidosMapper(Pedidos);


        }E